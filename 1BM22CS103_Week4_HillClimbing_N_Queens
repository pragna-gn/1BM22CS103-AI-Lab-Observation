import random

def calculate_cost(state):
    """Calculate the number of attacking pairs in the current state."""
    attacking_pairs = sum(
        1 for i in range(len(state))
        for j in range(i + 1, len(state))
        if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j)
    )
    return attacking_pairs

def generate_neighbours(state):
    """Generate all valid neighboring states by swapping pairs of queens."""
    neighbours = []
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            # Create a new state by swapping queens at indices i and j
            neighbour = state[:]
            neighbour[i], neighbour[j] = neighbour[j], neighbour[i]
            neighbours.append(neighbour)
    return neighbours

def print_board(state):
    """Print the chessboard representation of the state."""
    n = len(state)
    for row in range(n):
        line = " ".join("Q" if state[col] == row else "." for col in range(n))
        print(line)
    print()

def hill_climbing(initial_state):
    """Perform the hill climbing algorithm to find a solution to the N-Queens problem."""
    current_state = initial_state
    current_cost = calculate_cost(current_state)
    step = 0

    print(f"Step {step}: Initial state")
    print_board(current_state)
    print(f"Cost = {current_cost}\n")

    while True:
        step += 1
        neighbours = generate_neighbours(current_state)
        neighbour_costs = [calculate_cost(neighbour) for neighbour in neighbours]
        min_cost = min(neighbour_costs)

        # Check if we reached a local minimum
        if min_cost >= current_cost:
            print(f"Step {step}: Reached local minimum")
            print(f"Final state:")
            print_board(current_state)
            print(f"Final cost = {current_cost}\n")
            return current_state, current_cost

        # Move to the best neighbor
        best_neighbour = neighbours[neighbour_costs.index(min_cost)]
        print(f"Step {step}: Move to better neighbour")
        print_board(best_neighbour)
        print(f"Cost = {min_cost}\n")

        current_state = best_neighbour
        current_cost = min_cost

# Example initial state
initial_state = [3, 1, 2, 0]

# Run the hill climbing algorithm
final_state, final_cost = hill_climbing(initial_state)
